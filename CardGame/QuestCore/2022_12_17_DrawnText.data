*****
KA1001: The Whole Shebang
What is a 'shebang'?

(1) A starting comment and exclamation point
(2) A script that explodes without warning
(3) A program that warns before exploding
(4) Another name for an exception
(5) None of the above
*****
KA1002: The REPL
What is REPL?

(1) All objects are REPLacable
(2) Read, Evaluate, Print, and Loop
(3) The default version of Python
(4) A well-known research & design pattern
(5) None of the above
*****
KA1003: Common Data Types
Which classes manage values for 111, 1.11, and '111'?

(1) Class 'str'
(2) Class 'variable'
(3) Classes 'int', 'float' and 'str'
(4) Classes 'int', 'real' and 'str'
(5) None of the above
*****
KA1004: Common Object Types
What is type() used for?

(1) Detect string encoding
(2) Change object type
(3) Simulate human interaction
(4) Discover the class name
(5) None of the above
*****
KA1005: Common Object Content
What is dir() used for?

(1) Show object content
(2) Show folder content
(3) Show file content
(4) Discover the class name
(5) None of the above
*****
KA1006: Collection Sizes
How can we find the length of a string?

(1) Use the string's .length property
(2) Use the string's .length() operation
(3) Use ""[::-1]
(4) Use "".find(::end)
(5) None of the above
*****
KA1007: Immutable Collections
Which is an example of an 'immutable type'?

(1) set
(2) list
(3) dictionary
(4) tuple
(5) None of the above
*****
KA1008: Mutable Tuples
Can the content of a tuple be changed?

(1) No. Tuples are immutable.
(2) Yes. Tuples may have mutable objects.
*****
KA1009: Object Identification
The built-in id() function will:

(1) Compare object identities
(2) Verify object content
(3) Uniquely identify an object
(4) Identify the Python version
*****
KA1010: Mutable Lists
What is the difference between tuple and list?

(1) List are mutable, tuples are not
(2) Tuples are mutable, lists are not
(3) Both are collection types
(4) Neither can become dictionaries
*****
KA1011: Sorting Basics
How can we sort any collection type?

(1) Collections are always sorted
(2) Use the collection's .sort operation
(3) Use the sort() built-in
(4) Use the sorted() built-in
(5) Collections should never be sorted
*****
KA1012: Reverse Sorting Basics
How can we reverse-sort a standard collection type?

(1) Collections are always sorted
(2) Use the collection's .sort operation
(3) Use the collection's .reverse operation
(4) Use the sorted() built-in
(5) Collections should never be sorted
*****
KA1013: Key-Value Pairs
What is the difference between set and dict?

(1) dict manages key value pairs
(2) set can have duplicate values
(3) dict can have duplicate keys
(4) set cannot be reverse-sorted
(5) set and dict are equivalent
*****
KA1014: Sorting Dictionaries
How can we custom sort dictionary values?

(1) Use sorted() with a 'key' function
(2) Use sorted() with a 'filter' function
(3) Use the .sort() operation
(4) Use the .sorted() operation
(5) Use filter() with a 'sort' operation
*****
KA1015: Dictionary Orderings
Does dict() insure insertion-key ordering?

(1) dict() manages ordering
(2) dict() never manages ordering
(3) dict() always respects ordering
(4) dict() may / may not preserve order
(5) dict() does not use key value pairs
*****
KA1016: Dictionary Changes
How do we add a key:value pair to my_dict?

(1) my_dict.append('key', value)
(2) my_dict.insert('key', value)
(3) my_dict['key'] = value
(4) my_dict[value] = 'key'
(5) None of the above
*****
KA1017: Dictionary Removal
How do we remove 'key' from my_dict?

(1) my_dict.kill('key', value)
(2) my_dict.remove('key', value)
(3) my_dict['key'] = None
(4) del my_dict['key']
(5) None of the above
*****
KA1018: List Removal
How do we remove a value from my_list?

(1) my_list.pop(value)
(2) my_list.remove(value)
(3) my_list[value] = None
(4) rm my_list[value]
(5) Two of the above
*****
KA1019: List Sorting
How to sort my_list?

(1) sort(my_list)
(2) my_list = my_list.sorted()
(3) my_list.sort()
(4) my_list = my_list.sort()
(5) Two of the above
*****
KA1020: Merging Collections
How to combine two lists?

(1) list_a += list_b
(2) merged(list_a, list_b)
(3) list_a.combine(list_b)
(4) list_a.extend(list_b)
(5) Two of the above
*****
KA1021: Zero-Based Access
What is vals[2] when vals = ['a', 'b', 'c']?

(1) 'a'
(2) 'b'
(3) 'c'
*****
KA1022: Key-Index Default
What is the result of list({1:2, 3:4, 5:6})?

(1) An exception
(2) [1:2, 3:4, 5:6]
(3) [1, 3, 5]
(4) [2, 4, 6]
(5) None of the above
*****
KA1023: Function Default
What will be returned when we call:

def my_func():
    pass

(1) An exception
(2) NoneType
(3) 0
(4) False
(5) None of the above
*****
KA1024: Function Parameters
How can we define default function parameters?

(1) Default parameters cannot be specified
(2) def my_fun(param=1): ...
(3) def my_fun(param:1): ...
(4) def my_fun(param@1): ...
(5) None of the above
*****
KA1025: Using *arg
What is *args?

def a_times(*args):
    print(type(args))

(1) Always a tuple
(2) Always a collection
(3) Always a list
(4) Always a dictionary
(5) None of the above
*****
KA1026: Using **kwargs
What is **kwargs?

def a_times(**kwargs):
    print(type(kwargs))

(1) Always a tuple
(2) Always a collection
(3) Always a list
(4) Always a dictionary
(5) None of the above
*****
KA1027: Common *arg & **kwargs
Can a function use both *args and **kwargs?

(1) No. Once * is defined, we cannot use **
(2) No. Once ** is defined, we cannot use *
(3) Yes. But ** must be defined before *
(4) Yes. But * must be defined before **
(5) None of the above
*****
KA1028: Slicing Range
How to enumerate the odd numbers from:

t = range(10, 16)

(1) print(enumerate(t, 1, 2))
(2) print(*t[1::2])
(3) print(range(t, 1, 2))
(4) print(t[1::2])
(5) None of the above
*****
KA1029: The 'with' Keyword
What is the purpose of a 'with' statement?

(1) Manage block entry & exit operations
(2) Assert security credentials
(3) Insure exception handling
(4) Include a required module
(5) None of the above
*****
KA1030: The 'yield' Keyword
What is the purpose of a 'yield' statement?

(1) Manage block entry & exit operations
(2) Return a value with resumable execution
(3) Allow other threads to execute
(4) Yield to another process
(5) None of the above
*****
KA1031: Set -v- Dictionary
What is the difference between a dict and a set?

(1) A dict is mutable. A set is not
(2) A set is slower than a dict
(3) A set has keys in value arrays
(4) A dict has user assignable keys
(5) All of the above
*****
KA1032: Set Creation
What is the difference between set('cat') and {'cat'}?

(1) Nothing.
(2) The number of elements will differ
(3) Both perform Venn operations
(4) The instance will be the same
(5) Their content will be the same
*****
KA1033: Set Differences
What is the Venn difference between set('cat') and set('rat')?

(1) Nothing.
(2) The number of elements will differ
(3) Either 'r' or 'c'
(4) Either 'cr' or 'rc'
(5) Their difference will be the same
*****
KA1034: Docstring
A docstring is as way to ?

(1) Document a related help file
(2) Document a function, class, or member
(3) Provide a comment to a PEP
(4) Create a single line comment
(5) None of the above
*****
KA1035: Doctest Basics
A `doctest` is a way to ?

(1) Validate a PEP
(2) Perform Unit Testing
(3) Test for the main entry point
(4) Add a test case to a Docstring
(5) All of the above
*****
KA1036: Programming Basics
Entering `python3` at a CLI is often required to?

(1) Run Python on Windows
(2) Run VS Code
(3) Do testing-first 
(4) Start Python on POSIX
(5) All of the above
*****
KA1037: Programming Basics
How do we know what version of Python we are running?

(1) Run Python on Windows
(2) Open any REPL Session
(3) Run Python --version 
(4) Start Python on POSIX
(5) All of the above
*****
KA1038: Programming Basics
The `python.org` web-site manages the:

(1) Only place to get Python
(2) Python Implementation Standard
(3) Package Purchasing Options
(4) Python Tariffs & Taxes
(5) None of the above
*****
KA1039: Programming Basics
What is POSIX?

(1) Only place to get Python
(2) Database Standard
(3) Package Purchasing Options
(4) Operating System Standard
(5) None of the above
*****
KA1040: Python Basics
What is `pip`?

(1) File Copying Support
(2) Folder POSIX Standard
(3) Package Manager
(4) Operating System Standard
(5) None of the above
*****
KA1041: Python Basics
What is the Python `cheese shop`?

(1) Folder Copying Support
(2) POSIX File Standard
(3) Package Manager
(4) Python’s Package Nexus
(5) None of the above
*****
KA1042: Python Basics
What is an I.D.E?

(1) Folder Copying Support
(2) POSIX File Standard
(3) Package Manager
(4) Python’s Package Nexus
(5) None of the above
*****
KA1043: Python Basics
How can we include packages?

(1) Use the `using` statement
(2) Use the `include` statement
(3) Use the `import` statement
(4) Use PyPi
(5) All of the above
*****
KA1044: List Basics
['nagy'] expands to:

(1) ['n', 'a', 'g', 'y']
(2) ['nagy']
(3) ('nagy')
(4) {'n', 'a', 'g', 'y'}
(5) None of the above
*****
KA1045: List Basics
list('nagy') expands to:

(1) ['n', 'a', 'g', 'y']
(2) ['nagy']
(3) ('nagy')
(4) {'n', 'a', 'g', 'y'}
(5) None of the above
*****
KA1046: List Basics
Using [].extend('nagy') will:

(1) Append 'n', 'a', 'g', 'y'
(2) Append ['nagy']
(3) Append 'nagy'
(4) Append ['n', 'a', 'g', 'y']
(5) None of the above
*****
KA1046: List Basics
Using [].append('nagy') will:

(1) Append 'n', 'a', 'g', 'y'
(2) Append ['nagy']
(3) Append 'nagy'
(4) Append ['n', 'a', 'g', 'y']
(5) None of the above
*****
KA2001: Exceptions
What is an 'Exception'?

(1) Filtering "all but" values
(2) Removing "all inclusive" values
(3) Opportunity to handle errors
(4) Opportunity to manage qualified results
(5) None of the above
*****
KA2002: Exceptional Keywords
Which keywords help manage exceptions?

(1) try, catch, throw, else, and finally
(2) try, except, raise, else, and finally
(3) try, retry, quit, else, and finally
(4) try, catch, except, and finally
(5) None of the above
*****
KA2003: Assertions
What is an "assertion"?

(1) Function returning 'True' or 'False'
(2) Function returning a function
(3) Class implementing "Assert" pattern
(4) A debug statement
(5) A built-in Function
*****
KA2004: Class Basics
What different between a 'function' and a 'class'?

(1) Classes use inheritance
(2) Functions are objects
(3) Functions are classes
(4) Classes return functions
(5) None of the above
*****
KA2005: Basic Inheritance
In Python 'inheritance' is a way to ?

(1) Manage object factories
(2) Manage meta-data
(3) Assign interfaces
(4) Ensure meta relationships
(5) None of the above
*****
KA2006: Class Construction Basics
When do we initialize a parent class?

(1) Never initialize parent classes
(2) Initialize parents having data
(3) Only initialize our children
(4) Never initialize child classes
(5) None of the above
*****
KA2007: Private Membership
What is the difference between a 'public' and 'private' class member?

(1) A public operation is not copyrighted
(2) Private is usable from related classes
(3) Public is only used by another class
(4) Private cannot be used by other classes
(5) None of the above
*****
KA2008: Protected Membership
How does 'protected' membership protect class-member access?

(1) Raises run-time exceptions
(2) Raises start-up exceptions
(3) Ensures only related class access
(4) Ensures only non-public access
(5) None of the above
*****
KA2009: Is-A Relationships
An 'isa' relationship is a way to ?

(1) Ensure operational continuity
(2) Manage security
(3) Improve performance
(4) Encapsulate data
(5) None of the above
*****
KA2010: Has-A Relationship
The 'hasa' relationship is a way to ?

(1) See if a class has-a class member
(2) See if a class has-a class
(3) Check if a class is another class
(4) See if any module has-a class
(5) None of the above
*****
KA2011: Overriding
What is function overriding?

(1) Using one function when another fails
(2) Ignoring one function, to use another
(3) Replacing one function with another
(4) Overriding a parent operation
(5) None of the above
*****
KA2012: Encapsulation
'Encapsulation' is a way to ?

(1) Manage overridable functions
(2) Manage overridable data
(3) Protect class content
(4) Both (1) and (2)
(5) None of the above
*****
KA2013: Properties
In classes, property member decorators allow us to ?

(1) Surround data members with code
(2) Manage the 'has-a' relationship
(3) Create Object Factories
(4) Support Polymorphism
(5) None of the above
*****
KA2014: Class Representation
The purpose of the repr() built-in function is to ?

(1) Reproduce two objects by combination
(2) Return a cloned-instance of an object
(3) Return a string for humans to view
(4) Get a string to re-create an object
(5) None of the above
*****
KA2015: Framework Basics
The purpose of a 'framework' is to ?

(1) Enforce the C.R.U.D design pattern
(2) Provide a testable infrastructure
(3) Provide common code re-use patterns
(4) Ensure object-factor relationships
(5) None of the above
*****
KA2016: Base Classes
A 'base class' is a class that:

(1) Restores depleted resources
(2) Permits more secure DMZ operations
(3) Is re-used through inheritance
(4) Allows for continuous integration
(5) None of the above
*****
KA2017: Polymorphism
An 'abstract class' is required to ?

(1) Provide all operations
(2) Provide one or more operations
(3) Provide many or no operations
(4) All of the above
(5) None of the above
*****
KA2018: Keyword Conflicts
Why do we prepend an underscore to a class member name?

(1) To protect a member function
(2) To mark data as 'protected'
(3) To mark a class member as 'protected'
(4) To make access impossible
(5) None of the above
*****
KA2019: REPL Underscore
What will _ contain in REPL Mode?

(1) The user ID
(2) The user's password
(3) The license information
(4) The Python version
(5) None of the above
*****
KA2020: Coding Standards
What is PEP-8?

(1) List of all Python 3 standards
(2) Naming & coding style guidelines
(3) List of rejected proposals
(4) Python Enhancement Proposal archive
(5) None of the above
*****
KA2021: Code Evaluation
What will we see?

print(type(eval('1,2,3')))


(1) An Exception.
(2) <class 'dict'>
(3) <class 'set'>
(4) <class 'tuple'>
(5) None of the above
*****
KA2022: Length Evaluation
What will we see?

print(len(tuple('(1,2,3)')))

(1) An Exception
(2) 3
(3) 5
(4) 7
(5) None of the above
*****
KA2023: Anonymous Evaluations
What will `print({}.update({1:2, 3:4}))` display?

(1) None
(2) An Exception
(3) 1:2, 3:4
(4) {1:2, 3:4}
(5) None of the above
*****
KA2024: Lambda Functions
What is the difference between a 'lambda' and a 'function'?

(1) <class lambda> is not <class function>
(2) <class lambda> cannot be called
(3) <class function> can be called
(4) Two of the above
(5) None of the above
*****
KA2025: F String
What is an 'f string'?

(1) A way to publish string literals
(2) Support for Unicode
(3) A way to imbed evaluations into strings
(4) All of the above
(5) None of the above
*****
KA2026: String Formatting
How can we center a string?

(1) c = '*';f'{c:^10}'
(2) c = '*';f'{c:<10}'
(3) c = '*';f'{c:>10}'
(4) Two of the above
(5) None of the above
*****
KA2027: Unicode
How do we define Unicode strings in Python 3?

(1) U'This is Unicode'
(2) 'U\0n\0i\0c\0o\0d\0e'
(3) 'This is Unicode'
(4) All of the above
(5) None of the above
*****
KA2028: Zip
What is zip() used for?

(1) Creating compressed files
(2) Unpacking file archives
(3) Combining collections
(4) Two of the above
(5) None of the above
*****
KA2029: Enumeration
What will we see?

{c:x for x, c in enumerate('0a00b')
if c == '0'}

(1) {(2:'0'), (3:'0')}
(2) {'0': 3}
(3) [2, 3]
(4) [0, 2, 3]
(5) None of the above
*****
KA2030: Range -v- Enumerate
What is a difference between range() and enumerate()?

(1) range() returns 2 values
(2) enumerate() returns 3 values
(3) enumerate() has three forms / types
(4) range() offers a step / increment value
(5) None of the above
*****
KA2031: The 'is' Keyword
What is a difference between is and ==?

(1) Nothing - both compare equality
(2) The is keyword is slower
(3) The is checks for the same instance
(4) The == operator is faster
(5) Two of the above
*****
KA2032: The 'or' Keyword
What is Python's 'shortcut keyword'?

(1) A way to skip unnecessary evaluations
(2) A way to include all evaluations
(3) A way to include same instances
(4) A way to skip module inclusions
(5) Three of the above
*****
KA2033: The 'and' Keyword
What is the difference between 'and' and 'or' comparisons?

(1) The 'and' comparisons are all-inclusive
(2) The 'or' comparisons are all-inclusive
(3) Both perform Venn operations
(4) The 'or' can skip module inclusions
(5) The 'and' includes module inclusions
*****
KA2034: Set Comprehension
>>> {a for a in 'baggy' if a == 'g'}

(1) set()
(2) {'g', 'g'}
(3) {'g'}
(4) ['g']
(5) ['g', 'g']
*****
KA2035: Dict Comprehension
>>> {a:b for b, a in enumerate('abcb')}

(1) Range Exception
(2) {0: 'a', 1: 'b', 2: 'c', 3: 'b'}
(3) {}
(4) {'a': 0, 'b': 3, 'c': 2}
(5) {1}
*****
KA3001: Dunder Functions
In Python, a "Dunder Function" is:

(1)	A function that doesn't work
(2)	Code describing an enhancement (PEP)
(3)	An undocumented feature
(4)	Two underscores around a function name
(5)	None of the above
*****
KA3002: Wheel File
In Python, a "Wheels File" is:

(1) A newer package-distribution format
(2) Code for a proposed Python enhancement (PEP)
(3) A clear-text JSON file-format replacement
(4) A class file having underscores in the file name
(5) None of the above
*****
KA3003: exec()
What is Python's built-in exec()function used for?

(1) To run an external application
(2) To check if an object is callable
(3) To evaluate and test Python code
(4) To change environment variables
(5) None of the above
*****
KA3004: Using *args & **kwargs
What will we see?

def fun1(one, *args, **kwargs):
    print(one, *args, f'{**kwargs}')

fun1('zParam', 'a','b', 'c'=3, 'd'=4)

(1) An exception.
(2) zParam a b {'c': 3, 'd': 4}
(3) zParam a b 'c': 3, 'd': 4
(4) zParam a, b, 'c': 3, 'd': 4
(5) None of the above.
*****
KA3005: Iterable Types
Which 'Dunder(s) manage iterable types?
*****
KA3006: Limiting Class Variables
Which 'Dunder is used to define, as well as to lock, instance variable-definitions?
*****
KA3007: Function Name Management
Every function definition has two 'dunder names. What are they?
*****
KA3008: Function Call Management
Which Meta Method(s) are required to create a callable object?
*****
KA3009: Function Call Detection
Which built-in function allows us to determine if an instance is callable?
*****
KA3010: Deep Copy
What is a deep copy?
*****
KA3011: Copy Management
What standard Python module can help us make deeper copies of our objects?
*****
KA3012: Shallow Copy Management
What are the implications of using a 'shallow copy'?
*****
KA3013: Deep Copy Management
What are the implications of always using 'deep copies'?
*****
KA3014: Directed Copy Management
Can classes manage how they are copied?
*****
KA3015: Default Copy Management
Is Python's strategy to create 'shallow' or 'deep' copies of the built-in collection types?
*****
KA3016: Instance Management
What 'magic methods' can be used to construct a Python Object?
*****
KA3017: Object Destruction
What two 'magic methods' construct, as well as offer us any opportunity to destroy, class instances?
*****
KA3018: Deletion Caveat
When will the del keyword never use our del dunder?
*****
KA3019: Function Decoration
What is a `decorator function`?
*****
KA3020: Creation Decorators
What decorators are used to manage class creation?
*****
KA3021: Static Construction
What is the purpose of a @classmethod?
*****
KA3022: @classmethod -v- new
What parameters do a @classmethod and the new dunder have in common?
*****
KA3023: Static Methods
What is the purpose of a @staticmethod?
*****
KA3024: Object Construction
What parameters do a @staticmethod and the init dunder have in common?
*****
KA3025: Object Factories
What is the purpose of an `Object Factory`?
*****
KA3026: Duck Typing
What is `Duck Typing`?
*****
KA3027: Duck Typing Caveats
What are the pros & cons of `Duck Typing`?
*****
KA3028: Abstract Functions
What is @abstractmethod?
*****
KA3029: Signature Assurance
What is in the `abc` Module?
*****
KA3030: Static Member Assurance
How can we force subclasses to have a static object factory?
*****
KA3031: Object Management
How to check object membership?

(1) Use Inheritance
(2) Use 'Duck Typing'
(3) Use hasattr()
(4) Use getattr()
(5) Either 3 or 4
*****
KA3032: Object Management
How to add object membership?

(1) Use Inheritance
(2) Use 'Duck Typing'
(3) Use hasattr()
(4) Use setattr()
(5) Either 3 or 4
*****
KA3033: Object Management
Use hasattr() to:

(1) Check Inheritance
(2) Create 'Duck Typing'
(3) Safely check presence
(4) Return named attribute
(5) All of the above
*****
KA3034: Object Management
Use getattr() to:

(1) Check Inheritance
(2) Create 'Duck Typing'
(3) Safely check presence
(4) Return named attribute
(5) All of the above
*****
KA3035: Object Management 
Use setattr() to:

(1) Replace existing member
(2) Assign new attribute
(3) Safely check presence
(4) Attempt attribute removal
(5) Two of the above

***** 
KA3036: Object Management
Use delattr() to:

(1) Replace existing member
(2) Assign new attribute
(3) Safely remove presence
(4) Attempt attribute removal
(5) None of the above

