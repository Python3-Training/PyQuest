/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soft9000.qna1;

import java.awt.Dimension;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author profnagy
 */
public class JfrMain extends javax.swing.JFrame {

    boolean bChanged = false;

    /**
     * Creates new form JfrMain
     */
    public JfrMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jSplitPane1 = new javax.swing.JSplitPane();
        jpLeftControls = new javax.swing.JPanel();
        jtbLeft = new javax.swing.JToolBar();
        jbNew = new javax.swing.JButton();
        jbSync = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jbPaste = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jbDelete = new javax.swing.JButton();
        jbDataViews = new javax.swing.JPanel();
        jpFU = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jpNorth = new javax.swing.JPanel();
        jtbNorth = new javax.swing.JToolBar();
        jbLockToggle = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jcbViewSelection = new javax.swing.JComboBox<>();
        jpSouth = new javax.swing.JPanel();
        jSplitSouthDatas = new javax.swing.JSplitPane();
        jpListData = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jbViewDataRow = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jmuMain = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiDbNew = new javax.swing.JMenuItem();
        jmiDbOpen = new javax.swing.JMenuItem();
        jmTools = new javax.swing.JMenu();
        jmiStatus = new javax.swing.JMenuItem();
        jmiSelect = new javax.swing.JMenuItem();
        jmAdmin = new javax.swing.JMenu();
        jmiExport = new javax.swing.JMenuItem();
        jmiMerge = new javax.swing.JMenuItem();
        jmHelp = new javax.swing.JMenu();
        jmiHelpAbout = new javax.swing.JMenuItem();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QnA Database");
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jpLeftControls.setLayout(new java.awt.CardLayout());

        jtbLeft.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtbLeft.setFloatable(false);
        jtbLeft.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jtbLeft.setRollover(true);

        jbNew.setText("NEW");
        jbNew.setFocusable(false);
        jbNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewActionPerformed(evt);
            }
        });
        jtbLeft.add(jbNew);

        jbSync.setText("SYNC");
        jbSync.setFocusable(false);
        jbSync.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSync.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbSync.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSyncActionPerformed(evt);
            }
        });
        jtbLeft.add(jbSync);
        jtbLeft.add(jSeparator2);

        jbPaste.setText("PASTE");
        jbPaste.setFocusable(false);
        jbPaste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbPaste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPasteActionPerformed(evt);
            }
        });
        jtbLeft.add(jbPaste);

        jButton2.setText("COPY");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jtbLeft.add(jButton2);
        jtbLeft.add(jSeparator1);

        jbDelete.setText("DELETE");
        jbDelete.setFocusable(false);
        jbDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteActionPerformed(evt);
            }
        });
        jtbLeft.add(jbDelete);

        jpLeftControls.add(jtbLeft, "card2");

        jSplitPane1.setLeftComponent(jpLeftControls);

        jbDataViews.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jbDataViews.setLayout(new java.awt.BorderLayout());

        jpFU.setLayout(new java.awt.CardLayout());

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jpNorth.setLayout(new java.awt.CardLayout());

        jtbNorth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtbNorth.setRollover(true);

        jbLockToggle.setText("[UNLOCK]");
        jbLockToggle.setFocusable(false);
        jbLockToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbLockToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbLockToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLockToggleActionPerformed(evt);
            }
        });
        jtbNorth.add(jbLockToggle);

        jLabel1.setText("  Selection: ");
        jtbNorth.add(jLabel1);

        jcbViewSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "  DEFAULT  " }));
        jtbNorth.add(jcbViewSelection);

        jpNorth.add(jtbNorth, "card2");

        jSplitPane2.setLeftComponent(jpNorth);

        jpSouth.setLayout(new java.awt.CardLayout());

        jSplitSouthDatas.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jpListData.setBorder(javax.swing.BorderFactory.createTitledBorder(" Selected "));
        jpListData.setLayout(new java.awt.CardLayout());

        jScrollPane3.setViewportView(jList2);

        jpListData.add(jScrollPane3, "card2");

        jSplitSouthDatas.setLeftComponent(jpListData);

        jbViewDataRow.setBorder(javax.swing.BorderFactory.createTitledBorder(" Detail "));
        jbViewDataRow.setLayout(new java.awt.CardLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jbViewDataRow.add(jScrollPane1, "card2");

        jSplitSouthDatas.setRightComponent(jbViewDataRow);

        jpSouth.add(jSplitSouthDatas, "card2");

        jSplitPane2.setRightComponent(jpSouth);

        jpFU.add(jSplitPane2, "card2");

        jbDataViews.add(jpFU, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jbDataViews);

        getContentPane().add(jSplitPane1);

        jmFile.setText(" File ");

        jmiDbNew.setText("New ...");
        jmiDbNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDbNewActionPerformed(evt);
            }
        });
        jmFile.add(jmiDbNew);

        jmiDbOpen.setText("Open ...");
        jmiDbOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDbOpenActionPerformed(evt);
            }
        });
        jmFile.add(jmiDbOpen);

        jmuMain.add(jmFile);

        jmTools.setText(" Tools ");

        jmiStatus.setText("Status ...");
        jmiStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiStatusActionPerformed(evt);
            }
        });
        jmTools.add(jmiStatus);

        jmiSelect.setText("Select ...");
        jmiSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSelectActionPerformed(evt);
            }
        });
        jmTools.add(jmiSelect);

        jmuMain.add(jmTools);

        jmAdmin.setText(" Share ");

        jmiExport.setText("Export");
        jmAdmin.add(jmiExport);

        jmiMerge.setText("Merge ...");
        jmAdmin.add(jmiMerge);

        jmuMain.add(jmAdmin);

        jmHelp.setText(" Help ");

        jmiHelpAbout.setText("About ...");
        jmiHelpAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiHelpAboutActionPerformed(evt);
            }
        });
        jmHelp.add(jmiHelpAbout);

        jmuMain.add(jmHelp);

        setJMenuBar(jmuMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        doCopy();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jbLockToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLockToggleActionPerformed
        doUnlock();
    }//GEN-LAST:event_jbLockToggleActionPerformed

    private void jbNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewActionPerformed
        doNew();
    }//GEN-LAST:event_jbNewActionPerformed

    private void jbPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPasteActionPerformed
        doPaste();
    }//GEN-LAST:event_jbPasteActionPerformed

    private void jbDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteActionPerformed
        doDelete();
    }//GEN-LAST:event_jbDeleteActionPerformed

    private void jmiDbNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDbNewActionPerformed
        doCreateDb();
    }//GEN-LAST:event_jmiDbNewActionPerformed

    private void jmiDbOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDbOpenActionPerformed
        doOpenDb();
    }//GEN-LAST:event_jmiDbOpenActionPerformed

    private void jmiStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiStatusActionPerformed
        doShowStatus();
    }//GEN-LAST:event_jmiStatusActionPerformed

    private void jmiSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSelectActionPerformed
        doSetSelect();
    }//GEN-LAST:event_jmiSelectActionPerformed

    private void jmiHelpAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiHelpAboutActionPerformed
        doAbout();
    }//GEN-LAST:event_jmiHelpAboutActionPerformed

    private void jbSyncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSyncActionPerformed
        doSync();
    }//GEN-LAST:event_jbSyncActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JfrMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JfrMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JfrMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JfrMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JfrMain view = new JfrMain();
                Dimension dim = view.getSize();
                dim.width = 800;
                dim.height = 600;
                view.setSize(dim);
                // TODO: Need to check for multiple monitors!
                com.soft9000.gui.Misc.ScreenCenter(view);
                view.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitSouthDatas;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel jbDataViews;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbLockToggle;
    private javax.swing.JButton jbNew;
    private javax.swing.JButton jbPaste;
    private javax.swing.JButton jbSync;
    private javax.swing.JPanel jbViewDataRow;
    private javax.swing.JComboBox<String> jcbViewSelection;
    private javax.swing.JMenu jmAdmin;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmHelp;
    private javax.swing.JMenu jmTools;
    private javax.swing.JMenuItem jmiDbNew;
    private javax.swing.JMenuItem jmiDbOpen;
    private javax.swing.JMenuItem jmiExport;
    private javax.swing.JMenuItem jmiHelpAbout;
    private javax.swing.JMenuItem jmiMerge;
    private javax.swing.JMenuItem jmiSelect;
    private javax.swing.JMenuItem jmiStatus;
    private javax.swing.JMenuBar jmuMain;
    private javax.swing.JPanel jpFU;
    private javax.swing.JPanel jpLeftControls;
    private javax.swing.JPanel jpListData;
    private javax.swing.JPanel jpNorth;
    private javax.swing.JPanel jpSouth;
    private javax.swing.JToolBar jtbLeft;
    private javax.swing.JToolBar jtbNorth;
    // End of variables declaration//GEN-END:variables

    private void doNew() {
        String str = BasicQuestion.GetNewJSON();
        this.jTextArea1.setText(str);
    }

    private void doPaste() {
        if (this.bChanged) {
            int sel = JOptionPane.showConfirmDialog(rootPane, "Data update will be lost. Okay?", "Data Changed", JOptionPane.OK_CANCEL_OPTION);
            if (sel != JOptionPane.OK_OPTION) {
                return;
            }
        }
        String data = com.soft9000.gui.Misc.Paste();
        if (data.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Clipboard is empty.");
            return;
        }
        String decode = BasicQuestion.Decode(data);
        BasicQuestion info = BasicQuestion.FromClipboard(decode);
        if (info == null) {
            JOptionPane.showMessageDialog(rootPane, "Unsupport data format.");
            return;
        }
        doSync(info);
        this.bChanged = false;
    }

    private void doCopy() {
        String str = this.jTextArea1.getText();
        String encoded = BasicQuestion.Encode(str);
        com.soft9000.gui.Misc.Copy(encoded);
    }

    private void doDelete() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void doUnlock() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void doCreateDb() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void doOpenDb() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void doShowStatus() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void doSetSelect() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void doAbout() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * If the data exists, then update. Else, append.
     */
    private void doSync() {
        String str = this.jTextArea1.getText();
        BasicQuestion obj = BasicQuestion.FromJSON(str);
        doSync(obj);
    }

    /**
     * If the data exists, then update. Else, append.
     */
    public void doSync(final BasicQuestion obj) {
        Connection conn = null;
        try {
            if (obj == null) {
                JOptionPane.showMessageDialog(rootPane, "Unable to read data changes.");
                return;
            }
            QuestDAO dao = new QuestDAO();
            if (dao.assign(obj) == false) {
                JOptionPane.showMessageDialog(rootPane, "Unsupported data format.");
                return;
            }
            conn = QuestDAO.Connect();
            if (dao.ID == 0) {
                dao.insert(conn);
            } else {
                dao.update(conn);
            }

        } catch (Exception ex) {

        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, "Unable to sync data changes.");
                }
            }

        }
    }

}
